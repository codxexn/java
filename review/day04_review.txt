// 1. 관계/ 조건 연산자
int a = 100;
// && and
System.out.println(a == 100 && a > 10);
// a 와 100 이 같다고 선언을 하는 게 아니라 같냐고 질문하는 것
// 그래서 답은 true, false 로 나옴
// 그리고 a 는 10 보다 크냐?
// and 이기 때문에 둘 다 맞아야 true 둘 중 하나라도 아니면 false 가 나옴

System.out.println(a == 100 && a < 10);
// 둘 중 하나가 아니었기 때문에 답은 false
		
// || or
System.out.println(a == 100 || a < 10);
// a 는 100과 같거나 10 보다 작은 것 중 하나라도 만족하면 true
		
System.out.println(!(a == 100));
// 원래 결과값은 true 인데 ! not 이 붙어서 not true = false		


// 2. short curcuit evaluation
int b = 100;
b 라는 공간에 int type 의 100이라는 값을 저장해줘.

boolean c = (a == 10) && (++b > 10);
a는 10 이랑 같고 1+b 라는 값이 10 보다 크니? 둘 다 맞으면 true, 하나라도 틀리면 false의 값이 c에 저장되는 거야.
[ && 는 둘 다 만족해야 true 가 나온다. 하나라도 false 가 나오면 그 이후는 처리하지 않기 때문에 ++b 를 했을 때 처리가 되지 않아서 아래에 값이 b= 100이라고 나온 것]

System.out.println("a = " + a + ", b = " + b + ", c = " + c);
a= 100 ,b= 100 ,c= false  

boolean d = (a == 100) || (++b > 10);
a는 100 과 같거나 101는 10보다 크니? 하나라도 맞으면 true, 둘다 틀려야 false의 값이 d에 저장되는 거야.

System.out.println("a = " + a + ", b = " + b + ", d = " + d);
a= 100 ,b= 100 ,d= true

[이것 또한 || or 은 둘 중 하나라도 만족하면 true 가 나오기 때문에 첫째 조건 a=100 에서 이미 만족을 해서 두번째 조건 ++b는 처리되지 않아서 b=100 이라고 나온 것]

만약 boolean d = (a == 10) || (++b > 10); 이런 코드를 작성한다면 
일단 첫째 조건에서 false 이기 때문에 두번째 조건까지 처리를 한다.
그래서 결과는 a = 100, b = 101, d = true 가 나오는 것이다.


4) short circuit evaluation 을 지원
* - && : false 조건이 하나라도 나타나면 그 이후는 처리하지 않음
* (모든 조건식을 만족해야 true 이기 때문에 false 가 나오는 순간 더 볼 필요 없음)
* = false 가 나올 때까지, false 가 안나오면 끝날 때까지 연산해서 결과값 출력
* - || : true 조건이 하나라도 나타나면 그 이후는 처리하지 않음
* (하나라도 만족하면 true 이기 때문에 true 가 나오는 순간 더 볼 필요 없음)
* = true 가 나올 때까지, true 가 안나오면 끝날 때까지 연산해서 결과값 출력



3. 조건 연산자

int age = 18;
age 라는 공간을 만들어서 int type의 18이라는 값을 넣어줘.

boolean isAdult = age >= 20;
isAdult 라는 공간을 만들어서 boolean type의 값을 넣어주는데 age 공간에 있는 값이 20 보다 같거나 크면 true, 아니면 false 라고 저장해줘.

int fee = isAdult ? 4000 : 2000;
fee 라는 공간을 만들어서 int type의 값을 넣어주는데 저기 isAdult에 있는 값이 true면 4000을 넣어주고 false면 2000을 넣어줘.


그렇다면 다시 해석!!
int b = 100;
b라는 공간을 만들어서 int type의 100이라는 값을 넣어줘.

boolean c = (a == 10) && (++b > 10);
c라는 공간을 만들어서 boolean type의 값을 넣어주는데 a 공간에 있는 값이 10과 같고 1+b 공간에 있는 값이 10보다 큰 게 둘 다 만족하면 true, 하나라도 만족하지 않으면 false라고 저장해줘.
(근데 여기서 false 가 나오는 순간 뒤는 볼 필요도 없으니까 연산 그만하고.. 근데 끝까지 연산해야되는 상황이다? 그럼 연산한 값 그대로 일단 메모리에 저장해둬.)
+ 이게 결국 조건으로 쓰인 건데 조건에서 연산된 값도 메모리에 저장이 되냐는 것. 조건일 뿐인데 초기값으로 안 돌아가냐는 것.

System.out.println("a = " + a + ", b = " + b + ", c = " + c);


		


* Scanner
class 그대로 사용 : Library 에 있는 것의 경로에 곧장 접근해서 내 공간으로 가지고 오지 않겠다.
import 사용 : Library에 있는 것을 내 공간으로 대여하고 가지고 와서 사용하겠다.

예) 프린터가 필요해서 주문을 했는데 프린터 설계도(DIY)가 온 것임. 그 설계도를 보고 직접 만들어야 함.
Scanner 객체명 = new Scanner (입력스트림);
new : 새롭게 스캐너를 만들어낸다.
그래서 그 설계도를 기반으로 만들어 낸 것이 객체이다.
그리고 그 객체를 기반으로 사용자로부터 스캔을 받아오는 것.



객체 생성 : 설계 도면을 기반으로 실질적인 스캐너를 내가 만들어내겠다. 건축 도면을 보고 건축물을 짓는 것.
	

