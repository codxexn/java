1. 소스코드가 메모리에 로드가 돼야 실행이 된다.

코드 영역 : 실행할 프로그램의 코드가 저장
데이터 영역 : 전역변수, 정적변수(static)
힙 영역 : 동적 할당
- 런타임(컨파일이 다 끝난, 실행이 되는 시간) 때 크기가 결정
스택 영역 : 지역변수, 매개변수
push : 밀어 넣는 것
pop : 튕겨서 나오는 것
구조로 구성된다.
나중에 넣은 애가 먼저 나온다.
먼저 넣은 애가 나중에 나온다.
lifo
- 컴파일타임(소스코드가 머신코드로 번역하는 과정 - 준비과정) 때 크기가 결정

(씽크패드 노트북 추천)


객체가 만들어지려면 new 코드가 동작이 돼야 하고 그렇게 런이 돼야 객체가 만들어져서 메모리 어딘가에 저장이 되는 거고 런이 될 때 사용되는 메모리가 힙영역이다.

소스코드를 읽으면서 변수가 몇개가 있고 어떻게 동작할지 준비하는 과정에서 스택 영역의 메모리를 사용한다.

1) 모든 객체(인스턴스)가 특정 값을 공유하기 위해서 : 
이미 만들어져 있기 때문에 그 이후에 만들어지는 모든 객체가 그 static의 값을 다 가지고 태어나는 것과 마찬가지라서 데이터영역에 만들어진 static 필드만을 바라보게 된다.

2) 객체(인스턴스) 생성(new) 없이 클래스를 사용하기 위해서 : 
Math.PI/ Math.pow 와 같이
객체를 만들어서 불러오는 게 아니라
이미 만들어져서 존재하고 있어서 바로 불러와서 쓸 수 있다.
Math.PI/ Math.pow 은 java 에서 이미 만들어놓은 static 메소드
그런 필드나 메소드를 우리가 static을 만들 수 있다는 것이다.


pointer = esp
어셈블리 언어



Book

new Book() 이 호출될 때마다 1씩 증가한다.

호출될 때 ++을 하면 다른 객체에서도 그 값은 ++된 값이 공유가 된다.


