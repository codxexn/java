1. 변수
* int a = 100;
* "나 int type의 값을 저장할 거야. (4byte 공간 확보) 그 공간의 이름을 a라고 할 거야.
* 그리고 그 공간에 100 이라는 값을 집어넣어라.(대입해라.)"
* 이것이 변수를 선언하는 것.
* 초기화는 = 뒤의 값
* 선언은 메모리에 공간을 확보하는 것.
* 초기화는 가장 처음 값을 집어넣는 것(뒤에 a에 다른 값을 집어넣으면 초기화가 아니라 그냥 값을 집어넣는 것)
* Java 는 초기화 하지 않아도 자동으로 null 값으로 만들어줌
* 공간을 선언하는 것은 저장을 해둔다고 생각하면 됨 
 - 입력 받은 정보를 저장해두고 나중에도 쓸 수 있게 함
 - 입력하자마자 입력받은 값으로 바로 동작, 실행하는 경우는 잘 없다.
 - 중간에 다른 과정이 있어도 입력받은 정보를 나중에 사용할 수 있도록 해주는 역할을 하는 게 변수(공간 선언)
 = 일정 공간을 할애해서 정보를 저장해두는 것



* 변수는 저장하는 정보에 대한 의미를 담아야 한다. (작명의 고통이 따른다.)
 - 내가 이 값을 왜 만들었는가? 어디에 쓰려고 만들었는지 알아볼 수 있는 걸로 변수명을 지어야 한다.
 - 타인이 보고도 알아볼 수 있어야 한다.
 - 주석을 달아야 하는 이유와 동일
 - 띄어쓰기는 안된다. 언더바( _ ) 사용.
 - 외국사람들과 협업을 할 수도 있기 때문에 한글은 사용하면 안됨
 - 컴퓨터는 좌측에서부터 코드를 인식하기 때문에 숫자로 시작하면 변수명이 아니라 숫자값으로 인식을 한다.
   따라서 숫자로 시작하면 안됨
 - 띄어쓰기를 사용해야 할 때
	1. 언더바 사용
	2. camel case 사용
	camel case란? 띄어쓰기가 존재할 때 그 이후에 나오는 단어를 대문자로 만들어주는 것. 
		      대문자가 나오면 앞에 띄어쓰기를 한 거라고 생각하면 됨.
 - 첫글자는 무조건 소문자. (클래스파일명은 첫글자 무조건 대문자. 참조자료형 String 도 시작은 대문자.)
 - 자동완성 기능에서 내가 만든 변수도 알려주기 때문에 길게 만드는 것도 괜찮다.
 - 변수는 원하는 위치에서 선언이 가능하지만 웬만하면 가장 처음에 선언하고 시작하는 게 좋다.



* 지역 변수 : { } 코드 블럭 안이 하나의 영역이 된다. 이 영역 안에서 선언된 변수는 블럭 영역을 벗어나면 효력이 없어진다.
* 블럭을 벗어나도 효력이 있는 것을 전역 변수라고 하는데 잘 사용하지 않는다.


2. 형 변환 : (우선은) 기본 자료형에만 해당된다. 
작은 크기의 자료형을 큰 크기의 자료형으로 넣는 것은 문제가 없다. 변환 가능.
큰 크기의 자료형은 작은 크기의 자료형으로 넣을 수 없다. 값의 손실이 있을 수 있으므로 변환 불가능.

*Parsing (문자열 변환)
프로그래밍에서 . 은 Library 안에(in) 이라는 뜻.
int a = integer.parseInt(str1); = integer 안에  parseint
system.out.println(a); = system 안에 out 안에 println 을 가지고 와라.
(Java 안의 Library에 저장된 명령어/ 이미 만들어져서 제공되는 명령어)

double b = Double.parseDouble(str2);
( ) 안에 있는 문자열 값을 double 로 바꿔준다는 의미

String str3 = "true";
boolean c = Boolean.parseBoolean(str3);
=str3 의 "ture" 라는 문자열을 boolean 타입의 true로 인식해줌


int d = 100;
String str4 = "" + d;
String str4 = String.valueOf(d);
= 100이라는 숫자열을 문자열로 바꾸고 싶을 때
방법은 2가지, 결과는 동일
1. "" 문자 + 연산자 하면 문자와 숫자 100을 연산해서 문자열로 인식
2. String 안에 valueOf라는 기능을 써서 (d) 인 100 이라는 숫자열을 문자열로 변환해주는 것



해보자!

String strAge = "20";
String strHeight = "180.5";
= 참조 자료형인 문자열 String type 으로 strAge 라는 이름의 공간을 만들고  "20" 이라는 문자열의 주소를 저장해달라.
   참조 자료형인 문자열 String type 으로 strHeight 라는 이름의 공간을 만들고  "180.5" 이라는 문자열의 주소를 저장해달라.

int age = Integer.parseInt(strAge);
= age 라는 이름의 공간을 확보한 다음 int type의 값을 넣을 건데, srtAge 라는 String type이었던 "20" 이라는 문자열을 Int type 인 20 이라는 정수로 저장해줘.

double height = Double.parseDouble(strHeight);
= height 라는 이름의 공간을 확보한 다음 double type의 값을 넣을 건데, srtHeight 라는 String type이었던 "180.5" 이라는 문자열을 double type 인 180.5 라는 실수로 저장해줘.

[ Q. 여기서 질문. 왜 변수명 첫글자가 대문자고 뒤에 소문자로 쓴 거지?]
		
System.out.println("나이는 " + age + "살이고, 키는 " + height + "cm 이다.");
System.out.println("내년에는 " + (age + 1) + "살이다.");

= 나이는 뒤에 원래는 문자열이었던 "20" 이 정수인 20 으로 변환돼서 println.
   키는 뒤에 원래는 문자열이었던 "180.5" 가 실수인 180.5 로 변환돼서 println.



*operator1
1. 산술 연산자
- / : 나누기가 맞다.
정수와 실수가 있는데 정수는 나눴을 때 딱 떨어지지 않아도 몫만 가지고 온다.
실수는 / 를 써도 소수점까지 쭉 나눠준다.
정수와 실수는 .의 여부이므로 정수를 나눴을 때 딱 떨어지지 않아도 가지고 올 수가 없다. 소수점이 찍히면 더 이상 정수가 아니므로.
그래서 정수의 나머지 값을 가지고 올 수 있는 방법 % 이다.

2. 대입연산자
= : 우변에 있는 값을 좌변의 공간에 넣는다.
+= : 더해서 대입 (원래 공간에 있던 값과 우변에 있는 값을 더해서 다시 공간에 넣는다.)

System.out.println(10 / 3);
System.out.println(10 % 3);

두개의 차이는 10 나누기 3을 했을 때
/ 는 몫을 출력해주고
% 는 나머지를 출력해줌




















