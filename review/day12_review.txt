1. 객체
Scanner
Random new

Library
(# class 등 설계도들이 저장돼 있는 도서관)
main

객체, 인스턴스, Object 는 부르는 차이지 실제 차이는 없다. (같은 것이다.)

설계도(Class) 를 바탕으로 실제로 사용할 수 있는 실질적인 실체(객체)를 만드는 것이다.

import 는 설계도를 가지고 오기만 한 것이다. new 를 만들어줘야 진짜 객체가 생기는 것.

붕어빵 기계는 먹을 수 없고 붕어빵을 만들어야 먹을 수 있다.
= 클래스만 가지고는 아무것도 못하고 실제로 객체를 만들어야 사용할 수 있는 기능이다.
= new 를 통해서 만들어줘야 한다.

클래스 구성
필드, 메소드

변수가 클래스 안에 존재할 때 필드라고 해준다.

설계도 안에 정의가 돼 있는 것.

new 를 하면 메모리 어딘가에 객체가 만들어져서 저장이 된다.

변수를 선언해도 메모리 어딘가에 저장된다. 

하지만 필드는 설계도 안에 들어가 있는 것이다. (건축도면에 있는 방이 실제로 존재하지 않는 것처럼 클래스 안에 필드는 이렇게 만들 것이라는 정의서를 만드는 것.)

그것을 기반으로 객체가 만들어져야 그 필드가 실제로 메모리에 들어가진다.


그래서 객체생성
1. 설계도면으로 객체를 만든다. 
(건축도면으로 건축물을 만든다.)

정의와 생성은 다르다.
클래스를 정의한다는 것은 클래스 안에 문장으로 기재 돼 있는 것. 만들 수 있는 방법과 재료를 두는 것.

생성은 실제로 만들어서 사용하는 것.


+ 객체를 생성하기 전에는 메모리에 공간을 만들지 않는데 객체를 생성하는 순간 공간을 만들어서 객체를 저장한다.

필드는 명사, 메소드는 동사(기능)

필드(사람 이름, 주민등록번호)

메소드(걷는 것, 먹는 것, 뛰는 것) : 어떠한 기능상자이다.

필드

메소드 예
nextInt(); 정수를 받아오는 기능(받아와!)



2. 가져다 쓰는 법 .
. = ~ 안에
객체.필드
객체.메소드

제공되는 스캐너 설계도 안에 nextInt 기능이 있었고 그 기반으로 실제로 스캐너를 만들어서 그 기능을 실제로 쓴 것!













