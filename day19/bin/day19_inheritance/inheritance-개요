상속 (Inheritance)

	1. 기존 클래스를 재활용하는 것이다.
	2. 기존 클래스를 확장(extends) 하는 것이다.
	3. 동일한 내용을 여러번 작성할 필요가 없다.
	
	
상속이 가능한 경우

	1. IS-A 관계가 성립할 때
		1) 전기차는 자동차이다.
		2) 학생은 사람이다.
	2. HAS-A 관계가 성립할 때 (비추)
		1) 자동차는 핸들을 가지고 있다.
		2) 사람은 가방을 가지고 있다.
		
		
상속 문법 

	class 부모클래스 {
		// 슈퍼클래스
	}
	
	class 자식클래스 extends 부모클래스 {
		// 서브클래스
	}
	
	class 자손클래스 extends 자식클래스 {
		// 서브클래스
	}
	
	
상속 특징

	1. 서브클래스는 슈퍼클래스의 멤버(필드, 메소드)를 사용할 수 있다.
	2. 한개의 클래스만 상속할 수 있다. (다중 상속이 불가능하다.)
		- 상속 + 인터페이스 동시 사용으로 다중 상속을 해결할 수 있다. (나중 진도)
	3. 상속 횟수에는 제한이 없다. (자손 제한은 없다. 그렇지만 많이 타고 내려가면 유지보수도 힘들어져서 비추.)
	4. 자바의 모든 클래스는 java.lang.object 클래스를 슈퍼클래스로 가진다.
		- equals, toString 등
	
	class Person { }
	= 위 Person 클래스는 자바에 의해 다음의 형태로 해석
	= class Person extends object {  } : object 클래스의 멤버를 사용할 수 있다.
	
	
메소드 오버라이드 (Method Override)

	1. 부모클래스가 가지고 있는 메소드를 자식클래스가 다시 만드는 것을 말한다.
	2. 부모클래스가 가지고 있는 메소드와 완전히 동일한 원형으로 다시 만든다.
		(리턴타입 + 메소드명 + 매개변수 => 모두 동일하다.)
	3. 어노테이션 "@Override" 를 붙이면 개발자의 실수를 줄일 수 있다.
		(동일한 원형이 아니면 에러를 발생시켜주기 때문에 오버라이드가 잘 되었는지 확인이 쉽다.)
		
		// 오버 로딩 : 한 클래스내 이름은 같고, 매개변수가 다른 메소드가 여러개 존재할 수 있다.
		// 오버 라이드 : 부모클래스가 가지고 있는 메소드를 자식클래스가 그대로 똑같이 다시 만드는 것이다.
		
		
// 개인 필기

	Class B extends A {} : B를 A로 확장한다(연장한다). (A 클래스를 가지고 와서 B에서도 쓰겠다.)
	= A 를 부모로, B는 A를 상속받는 것으로 만들어주는 코드
	
	- 클래스 여러개에서 공통적으로 사용해야 하는 값이나 메소드나 필드등 요소는 부모클래스로 만들어주는 게 좋다.
	- 대분류가 모두 공통적으로 가지고 있는 속성만 모아둔 클래스를 만들어놓고 부모클래스로 만든다.
	- 많이 사용하는, 공통적으로 사용하는 것을 미리 만들어두고 extends 해서 가져다쓰는 순간 관계가 정립됨
	- 부모, 슈퍼 / 자식, 서브/ 자손, 서브


