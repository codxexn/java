예외 (exception)

	1. 오류 : 에러, 개발자가 손 못대는 수준의 문제
	2. 예외 : 개발자가 회피할 수 있는 수준의 문제	(ex) 다운캐스팅할 때 발생할 수 있는 문제를 instanceOf 연산자를 통해서 예방할 수 있다.)
	3. 예외클래스의 계층구조
		object - Throwable - Exception - RuntimeException
									   - IOException
									   - ClassNotFoundException
									   - ...
									   - 사용자 정의 예외
									   (모든 예외 객체는 Exception 을 상속받기 때문에 가장 밑에 적어주어야 한다.)
									   
	4. 모든 예외는 Exception 클래스로 처리할 수 있다.
	5. 예외 처리 형식
		try{
			...
			예외가 발생할 가능성이 있는 구역	// 예외 자체는 객체이다.
			...
			} catch(예외를 받는 매개변수) {
			  받는 예외를 처리하는 구역
			} finally {					// 어떤 상황이 생기든(try가 다 돌았든 catch가 실행됐든 무조건 실행시키는 것)
			  무조건 실행되는 구역
			}
	6. catch 블록의 주요 메소드
			1) getMessage()				: 예외 확인용, 발생한 예외 객체(인스턴스)에 저장된 메시지 반환
			2) printStackTrace()		: 예외 추적용, 예외 발생 당시의 호출 스택(Call Stack)에 있던 정보와 예외 메세지 출력