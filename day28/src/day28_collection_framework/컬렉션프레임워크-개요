
컬렉션 프레임워크 (Collection Framework) : 모든 컬렉션 프레임워크는 제네릭 처리가 돼 있다.
									 : 만들 때 타입 선언을 해줘야 한다.
									 : 데이터들의 집합

	1. 데이터를 다루기 위한 표준화된 구조
	2. 핵심 구조
		Collection - List		- ArrayList
								- LinkedList
								- Vector
				   - Set		- HashSet
		Map		   - HashMap
				   - SortedMap	- TreeMap
				   - HashTable
				   
	3. 주요 인터페이스의 핵심 기능
		- 인덱스가 있으면 동명이인이 있어도 분별이 가능하다. 따라서 중복 저장이 된다.
		- 인덱스를 사용하지 않는다는 것은 순서가 없다는 것.
		- 
		
		1) List	: 인덱스로 정체성을 판단한다.
			(1) 순서가 있는 데이터의 집합 (인덱스가 있다.)
			(2) 중복 저장 허용
		2) Set : 값만 가지고 정체성을 가진다.
			(1) 순서가 없는 데이터의 집합 (인덱스가 없다.)
			(2) 중복 저장 불가
		3) Map	: python의 dictionary와 같다.
			(1) 키(key)와 값(value)의 쌍(pair)으로 이루어진 데이터
			(2) 순서가 없는 데이터의 집합 (인덱스가 없다. 인덱스 대신 키(key)를 사용한다.)
			(3) 키(key)는 중복 저장 불가
			(4) 값(value)는 중복 저장 허용
	
	4. 반복자(Iterator)를 사용할 수 있다.
	
		List<String> list = new ArrayList<>();
		Iterator itr = list.iterator();			// itr : 컬렉션의 요소를 꺼낼 수 있다.
		
		While(itr.hasNext()) {					// 다음 요소가 있는지 true/false 를 뱉어준다.
												// 다음 요소가 있으면 true, 마지막 값이면 false
			itr.next();							// 다음 요소를 반환
		}
		

ArrayList

	1. 객체(인스턴스)를 여러개 저장할 수 있는 "배열"을 구현한 컬렉션이다.
	2. 가장 많이 사용된다.
	3. 기존에는 Vector를 많이 사용했다.
	: (연속적으로 정렬이 돼 있다.)
	4. 장점
		(1) 구조가 단순하다.
		(2) 읽어들이는 속도가 빠르다. (인덱스가 존재하기 때문)
		(3) 저장된 객체들의 변화가 적은 경우에 사용하면 좋다.
	5. 단점
		(1) 일단 만들고 나면 나중에 크기 변경이 힘들다.
		(2) 처음부터 크게 만들면 공간 낭비가 생긴다.
		(3) 비순차적 접근이 느리다.
		(4) 데이터의 중간 위치에 추가/제거가 어렵다.
		: (읽는 속도는 빠르지만 추가 및 제거를 하려면 다음 정렬의 데이터를 순차적으로 밀거나 당겨야 해서 데이터 처리 속도가 느려진다.)
		
		
LinkedList

	1. 자신과 연결된 다음 요소에 대한 "참조 +  데이터"로 구성된다.
	2. 비연속적인 공간을 사용한다. 
	: (산발적으로 Linking 이 돼 있다.)
	: (하나의 노드에는 값과 다음칸의 주소값이 같이 저장돼 있다.)
	: (추가 및 삭제를 하려면 저장돼 있던 다음 노드의 주소값만 바꿔주면 된다.)
	3. 장점
		(1) 추가/삭제 작업이 빠르다.
		(2) 잦은 추가/삭제가 발생되는 경우에 사용한다.
	4. 단점
		(1) 순차적인 순회가 느리다.
		(2) 구현이 어렵고, 오류가 발생할 가능성이 있다.
		
		
HashSet

	1. Set 인터페이스를 구현한 대표적인 클래스이다.
	2. 중복된 데이터는 저장되지 않는다.
	3. 중복된 데이터 판단 원리
		1) hashCode() 확인
			(1) 값이 같으면 equals() 호출해서 동등 비교
			(2) 값이 다르면 다른 데이터로 판단
		2) equals() 확인
	4. 사용자가 정의한 객체(인스턴스)를 저장하려면 hashCode(), equals() 를 오버라이드해야 한다.
	5. 저장 순서가 없다.(add 한 순서대로 유지되지 않는다.)
	6. add 한 순서를 유지하려면 LinkedHashSet 클래스를 사용한다.
	
	
HashMap

	1. 해시코드를 사용하는 Map이다. (많은 양의 자료에 적합)
	2. 키(key) + 값(value) 의 조합으로 데이터를 저장한다.
	3. 인덱스 대신 키(key)값을 사용한다.
	
		